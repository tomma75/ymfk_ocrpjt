YOKOGAWA OCR 데이터 준비 프로젝트 - 아키텍처 설계 지침

====================================================================================
1. 프로젝트 전체 아키텍처 원칙
====================================================================================

### 1.1 계층형 아키텍처 구조
- config/ : 설정 및 상수 관리 계층
- core/ : 기반 추상 클래스 및 인터페이스 계층  
- services/ : 비즈니스 로직 처리 계층
- models/ : 데이터 모델 정의 계층
- utils/ : 공통 유틸리티 계층
- tests/ : 테스트 코드 계층

### 1.2 의존성 방향 규칙
- 상위 계층은 하위 계층에 의존 가능
- 하위 계층은 상위 계층에 의존 금지
- 동일 계층 내에서는 인터페이스를 통한 느슨한 결합
- 의존성 주입(Dependency Injection) 패턴 적용

### 1.3 모듈 간 연결 규칙
- 모든 서비스는 BaseService 추상 클래스 상속
- 모든 모델은 BaseModel 추상 클래스 상속
- 공통 예외는 core/exceptions.py에서 관리
- 설정 값은 config/settings.py를 통해서만 접근

====================================================================================
2. 클래스 설계 원칙
====================================================================================

### 2.1 서비스 클래스 연결성
모든 서비스는 다음 패턴을 따름
class [ServiceName]Service(BaseService):
def __init__(self, config: ApplicationC logger: Logger):
init(config, logger)
self._
def _initialize_dependencies(self) -> None:
    # 의존성 초기화 로직
    pass

### 2.2 모델 클래스 연결성
모든 모델은 다음 패턴을 따름
class [ModelName]Model(BaseModel):
def __init__(self, data: Dict[str, y]):
init()
self._validate_inp
t(d
def to_dict(self) -> Dict[str, Any]:
    # 딕셔너리 변환 로직
    pass

@classmethod
def from_dict(cls, data: Dict[str, Any]) -> '[ModelName]Model':
    # 딕셔너리에서 인스턴스 생성
    pass

### 2.3 유틸리티 클래스 연결성
- 모든 유틸리티는 정적 메서드로 구성
- 상태를 가지지 않는 순수 함수로 설계
- 외부 의존성 최소화

====================================================================================
3. 함수 설계 원칙
====================================================================================

### 3.1 함수 명명 규칙
- 동사 + 명사 조합으로 명명
- 반환 타입을 함수명에서 유추 가능하도록 설계
- 예: get_user_data(), validate_document_format(), process_image_files()

### 3.2 함수 시그니처 표준화
def function_name(
required_param: T
pe, optional_param: Optional[Type]
= None
*ar
s, **kwargs
->
Args:
    required_param: 필수 매개변수 설명
    optional_param: 선택적 매개변수 설명
    
Returns:
    반환값 설명
    
Raises:
    SpecificError: 특정 오류 상황 설명
"""
pass

### 3.3 오류 처리 표준화
- 모든 함수는 예상 가능한 예외 상황에 대한 처리 포함
- 커스텀 예외 클래스 사용
- 로깅을 통한 오류 추적
