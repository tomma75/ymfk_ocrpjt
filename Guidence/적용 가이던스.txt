# YOKOGAWA OCR 프로젝트 - Services 파일 작성 요청

## 프로젝트 개요
YOKOGAWA 구매 발주서 특화 OCR 모델 개발을 위한 데이터 준비 시스템

## 업로드된 가이던스 파일 (필수 엄격 준수)
다음 9개의 가이던스 파일을 모두 엄격히 준수해주세요:

### 아키텍처 및 설계 원칙
- `project_architecture_guideline.txt`: 계층형 아키텍처 원칙
- `class_interface_specifications.txt`: 클래스 인터페이스 명세
- `dependency_management_rules.txt`: 의존성 관리 규칙

### 코드 품질 및 일관성
- `variable_naming_standards.txt`: 변수명 표준화 (Snake Case 엄격 적용)
- `data_flow_consistency_guidelines.txt`: 데이터 흐름 일관성
- `code_quality_validation_checklist.txt`: 품질 검증 기준

### 구현 명세
- `class-and-function.txt`: 각 파일별 클래스/함수 목록
- `project_config.txt`: 프로젝트 구조

## 업로드된 의존성 .py 파일들 분석 요청
다음 업로드된 파일들을 분석하여 services 파일들을 작성해주세요:

### 핵심 기반 파일들
- `core/base_classes.py`: 추상 클래스 및 인터페이스 정의
- `core/exceptions.py`: 커스텀 예외 클래스 정의
- `config/settings.py`: 설정 관리 클래스
- `config/constants.py`: 상수 정의

### 데이터 모델 파일들
- `models/document_model.py`: 문서 데이터 모델
- `models/annotation_model.py`: 어노테이션 데이터 모델

### 유틸리티 파일들
- `utils/logger_util.py`: 로깅 유틸리티
- `utils/file_handler.py`: 파일 처리 유틸리티
- `utils/image_processor.py`: 이미지 처리 유틸리티

### 기타 파일들
- `main.py`: 메인 실행 파일
- `tests/test_data_preparation.py`: 테스트 코드

## 작성 요청 Services 파일
위 모든 파일들을 분석하여 다음 파일을 작성해주세요:

**첫 번째 요청: `services/data_collection_service.py`**

## 핵심 요구사항
1. **완전한 의존성 분석**: 업로드된 모든 .py 파일의 클래스/함수 파악
2. **가이던스 100% 준수**: 모든 가이던스 파일의 규칙 엄격 적용
3. **실행 가능성 보장**: 모든 import 구문 정확성 확인
4. **일관성 유지**: 변수명, 함수명, 클래스명 일관성 보장

## 분석 및 작성 프로세스
1. **의존성 분석**: 업로드된 각 .py 파일의 클래스/함수 목록 추출
2. **인터페이스 매핑**: BaseService, DataCollectionInterface 구현 방법 확인
3. **Import 구조 설계**: 올바른 import 경로 및 의존성 구조 설계
4. **코드 작성**: 모든 가이던스 준수하여 완전한 코드 작성